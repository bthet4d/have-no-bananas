<?xml version="1.0" encoding="UTF-8"?>

<!--
	This build file does the same thing as the normal build.xml for
	this example, except that we specify a location for the coverage
	data file.
-->

<project name="have-no-bananas" default="all" basedir=".">

	<description>
    Cobertura - http://cobertura.sourceforge.net/
    Copyright (C) 2003 jcoverage ltd.
    Copyright (C) 2005 Mark Doliner &lt;thekingant@users.sourceforge.net&gt;
    Cobertura is licensed under the GNU General Public License
    Cobertura comes with ABSOLUTELY NO WARRANTY
    </description>

    <!-- Propery definitions from original build.xml -->
    <property name="src.dir" value="src${file.separator}main${file.separator}java"
              description="project source code"/>
    
	<property name="src-test.dir" value="src${file.separator}test${file.separator}java"
	          description="project test code"/>
    
	<property name="lib.dir" value="lib"
	          description="project libraries are found here"/> <!-- Where lib = folder in build.xml's directory -->
    
	<property name="build.dir" value="build"
              description="anything this build script generates goes under this directory"/>
    
	<property name="classes.dir" value="${build.dir}${file.separator}classes"
              description="Java class files compiled by this build script  go here"/>
    
	<property name="report.dir" value="${build.dir}${file.separator}report"
              description="this directory is used by JUnit. Test results are placed here in a nice HTML format"/>
	
	<property name="mockito" value="${lib.dir}${file.separator}mockito"/> 

    <!-- from cobertura build.xml -->
	<property file="build.properties" />

	<path id="cobertura_classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="${lib}${file.separator}**${file.separator}*.jar" />
		</fileset>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
		<fileset dir="${mockito}">
		    <include name="**/*.jar"/>
		</fileset>
	</path>

	<taskdef classpathref="cobertura_classpath" resource="tasks.properties"/>

	<target name="clean" description="Remove all files created by the build\test process.">
		<delete dir="${classes.dir}" />
		<delete dir="${cobeinstr.dir}" />
		<delete dir="${cobreports.dir}" />
		<delete file="cobertura.log" />
	</target>

	<target name="init">
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${cobeinstr.dir}" />
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />
		<mkdir dir="${coverage.xml.dir}" />
		<mkdir dir="${coverage.html.dir}" />
	</target>

	<target name="compile" depends="init">
		<javac destdir="${classes.dir}" debug="yes">
            <src path="${src.dir}"/>
            <src path="${src-test.dir}"/>
			<classpath refid="cobertura_classpath" />
		</javac>
	</target>

	<target name="instrument" depends="init,compile">
		<!--
			Remove the coverage data file and any old instrumentation.
		-->
		<delete file="${cobreports.dir}${file.separator}basic_coverage.ser"/>
		<delete dir="${cobeinstr.dir}" />

		<!--
			Instrument the application classes, writing the
			instrumented classes into ${build.cobeinstr.dir}.
		-->
		<cobertura-instrument datafile="${cobreports.dir}${file.separator}basic_coverage.ser" todir="${cobeinstr.dir}">
			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${classes.dir}">
				<!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
				<include name="**${file.separator}*.class" />
				<exclude name="**${file.separator}*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="test" depends="init,compile">
		<junit fork="yes" dir="${basedir}" failureProperty="test.failed" printsummary="yes" showoutput="true">
			<!--
				Specify the name of the coverage data file to use.
			-->
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobreports.dir}${file.separator}basic_coverage.ser" />

			<!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
			<classpath location="${cobeinstr.dir}" />
			<classpath location="${classes.dir}" />

			<!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
			<classpath refid="cobertura_classpath" />

			<formatter type="xml" />
			<!--test name="${testcase}" todir="${reports.xml.dir}" if="testcase" /-->
			<!--batchtest todir="${reports.xml.dir}" unless="testcase"-->
			<batchtest todir="${reports.xml.dir}" fork="yes">
				<fileset dir="${src-test.dir}">
					<include name="**${file.separator}*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="${reports.xml.dir}">
			<fileset dir="${reports.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.html.dir}" />
		</junitreport>
	</target>

	<target name="coverage-report">
		<cobertura-report datafile="${cobreports.dir}${file.separator}basic_coverage.ser" srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
		<cobertura-report datafile="${cobreports.dir}${file.separator}basic_coverage.ser" srcdir="${src.dir}" destdir="${coverage.html.dir}" />
	</target>

	<target name="all" depends="compile,instrument,test,coverage-report"
           description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

</project>
